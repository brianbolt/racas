% Generated by roxygen2 (4.0.2): do not edit by hand
\name{plotCurve}
\alias{plotCurve}
\title{Curve plotting function}
\usage{
plotCurve(curveData, params, fitFunction, paramNames = c("ec50", "min", "max",
  "slope"), drawIntercept = "ec50", outFile = NA, ymin = NA,
  logDose = FALSE, logResponse = FALSE, ymax = NA, xmin = NA,
  xmax = NA, height = 300, width = 300, showGrid = FALSE,
  showLegend = FALSE, showAxes = TRUE, drawCurve = TRUE,
  drawFlagged = FALSE, connectPoints = FALSE, plotMeans = FALSE,
  drawStdDevs = FALSE, addShapes = FALSE, labelAxes = FALSE, ...)
}
\arguments{
\item{curveData}{a data frame with the points with column names curveid, dose, response, flag}

\item{params}{the set of parameters used to enumerate the curve}

\item{outFile}{file to plot image to, if not specified then the function plots to graphic device}

\item{ymin}{specify the ymin axes location}

\item{logDose}{specify if x axis is in log space}

\item{logResponse}{specify if y axis is in log space}

\item{ymax}{specify the ymax axes location}

\item{xmin}{specify the xmin axes location}

\item{xmax}{specify the xmax axes location}

\item{height}{height of the plot in pixels}

\item{width}{width of the plot in pixels}

\item{showGrid}{adds a grid to the plot}

\item{showLegend}{shows a legend with curve ids on the right hand side of the plot}

\item{showAxes}{turns axes on or off}

\item{drawCurve}{turn the curve drawing on and off}

\item{connectPoints}{will draw a line between the means of each mean X - Y}

\item{plotMeans}{will plot the mean Y given a given X}

\item{drawStdDevs}{will plot the Standard Deviations for each dose response combination}

\item{drawCurve}{turn the curve drawing on and off}
}
\value{
If  outFile is specified, then the function prints an image to the out file, if outFile is not specified, then then an image is plotted to a graphics device
}
\description{
This function takes in a set of data points, curve parameters, and an equation and plots the data
}
\examples{
LL4 <- 'min + (max - min)/((1 + exp(-hill * (log(x/ec50))))^1)'
data(curveData)
params <- curveData$parameters
curveData <- curveData$points
plotData(curveData, params, paramNames = c("ec50", "min", "max", "hill"), LL4, outFile = NA, ymin = NA, logDose = TRUE, ymax = NA, xmin = NA, xmax = NA, height = 300, width = 300, showGrid = FALSE, showLegend = FALSE, showAxes = TRUE)
plotData(curveData, params, paramNames = c("ec50", "min", "max", "hill"), LL4, outFile = NA, ymin = NA, logDose = TRUE, ymax = NA, xmin = NA, xmax = NA, height = 300, width = 300, showGrid = FALSE, showLegend = FALSE, showAxes = TRUE, plotMeans = TRUE)
plotData(curveData, params, paramNames = c("ec50", "min", "max", "hill"), LL4, outFile = NA, ymin = NA, logDose = TRUE, ymax = NA, xmin = NA, xmax = NA, height = 300, width = 300, showGrid = FALSE, showLegend = FALSE, showAxes = TRUE, plotMeans = TRUE, connectPoints = TRUE, drawCurve = FALSE)
plotData(curveData, params, paramNames = c("ec50", "min", "max", "hill"), LL4, outFile = NA, ymin = NA, logDose = TRUE, ymax = NA, xmin = NA, xmax = NA, height = 300, width = 300, showGrid = FALSE, showLegend = FALSE, showAxes = TRUE, plotMeans = TRUE, connectPoints = TRUE, drawCurve = FALSE, drawStdDevs = TRUE)

#Ki Data (using raw data)
data(kiData)
params <- kiData$parameters
points <- kiData$points
paramNames <- c("Top", "Bottom", "HotNM", "HotKDNM", "Log10Ki")
KiFCT <- 'Bottom + (Top-Bottom)/(1+10^(x-log10((10^Log10Ki)*(1+HotNM/HotKDNM))))'
plotData(points, params, KiFCT, paramNames, drawIntercept= "Log10Ki", outFile = NA, ymin = NA, ymax = NA, xmin = NA, xmax = NA, height = 300, width = 300, showGrid = FALSE, showLegend = FALSE, showAxes = TRUE)

#PK Curves
#PO
data(poPKCurveData)
params <- poPKCurveData$parameters
curveData <- poPKCurveData$points
plotData(curveData, params, paramNames = NA, outFile = NA, ymin = NA, logDose = FALSE, logResponse=TRUE, ymax = NA, xmin = NA, xmax = NA, height = 300, width = 300, showGrid = FALSE, showLegend = FALSE, showAxes = TRUE, plotMeans = FALSE, connectPoints = TRUE, drawCurve = FALSE, drawStdDevs = FALSE)
plotData(curveData, params, paramNames = NA, outFile = NA, ymin = NA, logDose = FALSE, logResponse=TRUE, ymax = NA, xmin = NA, xmax = NA, height = 300, width = 300, showGrid = FALSE, showLegend = FALSE, showAxes = TRUE, plotMeans = FALSE, connectPoints = TRUE, drawCurve = FALSE, drawStdDevs = FALSE, addShapes = TRUE)

#IV
data(ivPKCurveData)
params <- ivPKCurveData$parameters
curveData <- ivPKCurveData$points
plotData(curveData, params, paramNames = NA, outFile = NA, ymin = NA, logDose = FALSE, logResponse=TRUE, ymax = NA, xmin = NA, xmax = NA, height = 300, width = 300, showGrid = FALSE, showLegend = FALSE, showAxes = TRUE, plotMeans = FALSE, connectPoints = TRUE, drawCurve = FALSE, drawStdDevs = FALSE)
plotData(curveData, params, paramNames = NA, outFile = NA, ymin = NA, logDose = FALSE, logResponse=TRUE, ymax = NA, xmin = NA, xmax = NA, height = 300, width = 300, showGrid = FALSE, showLegend = FALSE, showAxes = TRUE, plotMeans = FALSE, connectPoints = TRUE, drawCurve = FALSE, drawStdDevs = FALSE, addShapes = TRUE)

#IV Overlay
data(overlayIVPKCurveData)
params <- overlayIVPKCurveData$parameters
curveData <- overlayIVPKCurveData$points
plotData(curveData, params, paramNames = NA, outFile = NA, ymin = NA, logDose = FALSE, logResponse=TRUE, ymax = NA, xmin = NA, xmax = NA, height = 300, width = 300, showGrid = FALSE, showLegend = FALSE, showAxes = TRUE, plotMeans = FALSE, connectPoints = TRUE, drawCurve = FALSE, drawStdDevs = FALSE)

#PO IV
data(poIVPKCurveData)
params <- poIVPKCurveData$parameters
curveData <- poIVPKCurveData$points
plotData(curveData, params, paramNames = NA, outFile = NA, ymin = NA, logDose = FALSE, logResponse=TRUE, ymax = NA, xmin = NA, xmax = NA, height = 300, width = 300, showGrid = FALSE, showLegend = FALSE, showAxes = TRUE, plotMeans = FALSE, connectPoints = TRUE, drawCurve = FALSE, addShapes = TRUE, drawStdDevs = TRUE)
}
\keyword{curve}
\keyword{plot,}
\keyword{render,}

